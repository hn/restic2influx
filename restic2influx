#!/usr/bin/perl
#
# restic2influx.pl -- parse restic status messages and feed them to influxdb
#
# (C) 2021 Hajo Noerenberg
#
# http://www.noerenberg.de/
# https://github.com/hn/restic2influx
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3.0 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.txt>.
#

# apt-get install libjson-perl libinfluxdb-lineprotocol-perl libwww-perl

use strict;
use POSIX qw(strftime);
use JSON qw(decode_json);
use InfluxDB::LineProtocol qw(data2line);
use LWP::UserAgent;
use HTTP::Request::Common;
use Getopt::Long;

my $debug;
my $verbose;
my $status;
my $repo;
my $influxdb;
my $influxhost = 'http://localhost:8086';
my $influxuser;
my $influxpass;

my $start = time();
my $lastreq;

GetOptions ("debug|d+"     => \$debug,
            "verbose|v+"   => \$verbose,
            "status|s:30"  => \$status,
            "user|u=s"     => \$influxuser,
            "password|p=s" => \$influxpass
            ) || die( "Error in command line arguments\n" );

$repo = shift(@ARGV);
$influxdb = shift(@ARGV);
$influxhost = shift(@ARGV) if (@ARGV);

die("Usage: $0 [-d] [-v] [-s] [-u user] [-p password] <restic repository> <influx db> [influx host]") if ( !$repo || !$influxdb);

while ( my $line = <STDIN> ) {

    my $now = time();
    my $message;
    eval { $message = decode_json($line); 1; } || next;

    my $type = delete ${$message}{'message_type'};
    my $influxreq;

    if ( $type eq "status" ) {
        # message_type      = "status"
        # seconds_elapsed   = "2"         : Time since backup started
        # seconds_remaining = "42"        : Estimated time remaining
        # percent_done      = "0.578058"  : Percentage of data backed up (bytes_done/total_bytes)
        # total_files       = "8864"      : Total number of files detected
        # files_done        = "2737"      : Files completed (backed up or confirmed in repo)
        # total_bytes       = "157955039" : Total number of bytes in backup set
        # bytes_done        = "91307307"  : Number of bytes completed (backed up or confirmed in repo)
        # error_count       = "0"         : Number of errors
        # current_files     = ARRAY       : List of files currently being backed up
        #
        my $total_files = $message->{"total_files"};
        while ( $total_files =~ s/(\d+)(\d\d\d)/$1\.$2/ ) { };   # add thousands separator
        my $files_done = $message->{"files_done"} || 0;
        while ( $files_done =~ s/(\d+)(\d\d\d)/$1\.$2/ ) { };
        my $total_mbytes = int ( $message->{"total_bytes"} / 1048576 );
        while ( $total_mbytes =~ s/(\d+)(\d\d\d)/$1\.$2/ ) { }
        my $mbytes_done = int ( $message->{"bytes_done"} / 1048576 );
        while ( $mbytes_done =~ s/(\d+)(\d\d\d)/$1\.$2/ ) { }
        my $percent = $message->{"percent_done"};
        my $remaining = $message->{"seconds_remaining"};
        $0 = "restic2influx " . $repo
          . " [Done: " . sprintf( "%.2f%%", $percent * 100 )
          . " ETA: " . ( ( $remaining > 0 && $remaining < 42000042 ) ? strftime("%m-%d %H:%M", localtime( $now + $remaining )) : "unknown" )
          . " Files: " . $files_done . "/" . $total_files
          . " MBytes: " . $mbytes_done . "/" . $total_mbytes . "]";

        if ($status && (($now - $lastreq) > $status)) {
            $lastreq = $now;
            print $0 . "\n" if ($debug>1);
            $message->{"percent_done"} .= ".0" unless ($percent =~ /\./);			# force float
            if (ref($message->{"current_files"}) eq 'ARRAY') {
                $message->{"current_files"} = join(", ", @{$message->{"current_files"}});	# flatten file list
            }
            $influxreq = data2line(
                'restic',
                $message,
                { 'repo' => $repo, 'type' => $type }
            );
        }

    } elsif ( $type eq "summary" ) {
        # message_type          = "summary"
        # files_new             = "2"        : Number of new files
        # files_changed         = "0"        : Number of files that changed
        # files_unmodified      = "8864"     : Number of files that did not change
        # dirs_new              = "0"        : Number of new directories
        # dirs_changed          = "0"        : Number of directories that changed
        # dirs_unmodified       = "986"      : Number of directories that did not change
        # data_blobs            = "0"        : Number of data blobs
        # tree_blobs            = "0"        : Number of tree blobs
        # data_added            = "123"      : Amount of data added, in bytes
        # total_files_processed = "8864"     : Total number of files processed
        # total_bytes_processed = "15795503" : Total number of bytes processed
        # total_duration        = "3.742542" : Total time it took for the operation to complete
        # snapshot_id           = "51a48509" : The short ID of the new snapshot 

        if ($verbose) {
            printf "%23s: %s\n", "repository", $repo;;
            foreach my $key ( sort keys %{$message} ) {
                printf "%23s: %s\n", $key, $message->{$key};
            }
        }
        my $snapshot = delete ${$message}{'snapshot_id'};
        $influxreq = data2line(
            'restic',
            $message,
            { 'repo' => $repo, 'type' => $type, 'snapshot' => $snapshot }
        );

    } elsif ( $type eq "error" ) {
        # message_type      = "error"
        # error             = "..."        : Error message
        # during            = "..."        : What restic was trying to do
        # item              = "..."        : Usually, the path of the problematic file
        #

    } elsif ( $type eq "verbose_status" ) {
        # message_type      = "verbose_status"

    }

    next unless ($influxreq);

    if ($debug) {
        print $influxreq . "\n";
    } else {
        my $ua       = LWP::UserAgent->new();
        my $request = POST $influxhost . '/write?precision=ns&db=' . $influxdb, Content => $influxreq;
        if ($influxuser && $influxpass) {
            $request->authorization_basic($influxuser, $influxpass);
        }
        my $response = $ua->request($request);
        print $response->status_line . "\n" . $response->headers()->as_string if ($debug>1);    # HTTP 204 is ok
    }

}
